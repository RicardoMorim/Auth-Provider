@startuml Auth Starter - Service Architecture

!theme sketchy-outline
skinparam backgroundColor #FEFEFE
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D
skinparam noteBackgroundColor #E8F4FD
skinparam noteBorderColor #2C5282
skinparam noteFontColor #1A202C

title Ricardo Auth Starter - Service Architecture (v4.0.0)

package "Core Service Interfaces" {
    interface "UserService<U, R, ID>" as UserService
    interface JwtService
    interface PasswordPolicyService
    interface "RefreshTokenService<U, ID>" as RefreshTokenService
    interface PasswordResetService
    interface RoleService
}

package "Service Implementations" {
    class UserServiceImpl {
        -userRepository: UserRepository<U, R, ID>
        -userFactory: UserFactory<U, R, ID>
        +createUser(user: U): U
        +getUserById(id: ID): U
        +getUserByEmail(email: String): U
        +updateUser(id: ID, user: U): U
        +deleteUser(id: ID): void
    }
    
    class JwtServiceImpl {
        -secret: String
        -accessTokenExpiration: long
        -key: Key
        +generateAccessToken(subject: String, authorities: Collection<GrantedAuthority>): String
        +extractSubject(token: String): String
        +isTokenValid(token: String): boolean
        +isTokenValid(token: String, email: String): boolean
    }
    
    class PasswordPolicy {
        -authProperties: AuthProperties
        -requireUpperCase: boolean
        -requireLowerCase: boolean
        -requireDigit: boolean
        -requireSpecialChar: boolean
        -preventCommonPasswords: boolean
        -commonPasswords: Set<String>
        +validatePassword(password: String): boolean
        +generateSecurePassword(): String
    }
    
    class PasswordResetServiceImpl {
        -passwordResetRepository: PasswordResetRepository
        -userService: UserService
        -emailService: EmailService
        -authProperties: AuthProperties
        +requestPasswordReset(email: String): void
        +confirmPasswordReset(token: String, newPassword: String): void
        +isTokenValid(token: String): boolean
        +cleanupExpiredTokens(): void
        -generateSecureToken(): String
        -sendPasswordResetEmail(email: String, token: String): void
    }
    
    class RoleServiceImpl {
        -roleRepository: RoleRepository
        -userService: UserService
        +getAllRoles(): List<Role>
        +getRoleById(id: UUID): Role
        +createRole(name: String, description: String): Role
        +updateRole(id: UUID, description: String): Role
        +deleteRole(id: UUID): void
        +isRoleAssignedToUsers(id: UUID): boolean
    }
    
    class EmailService {
        -mailSender: JavaMailSender
        -authProperties: AuthProperties
        +sendPasswordResetEmail(email: String, resetUrl: String): void
        +sendEmail(to: String, subject: String, content: String): void
    }
    
    class RefreshTokenServiceImpl {
        -refreshTokenRepository: RefreshTokenRepository
        -userService: UserService
        -authProperties: AuthProperties
        +createRefreshToken(user: AuthUser): RefreshToken
        +findByToken(token: String): Optional<RefreshToken>
        +verifyExpiration(token: RefreshToken): RefreshToken
        +deleteByToken(token: String): void
        +deleteAllByUserEmail(userEmail: String): void
    }
    
    class RefreshTokenCleanupService {
        -refreshTokenRepository: RefreshTokenRepository
        -authProperties: AuthProperties
        +cleanupExpiredTokens(): void
        +cleanupExpiredTokensForUser(userEmail: String): void
    }
    
    class UserDetailsServiceImpl {
        -userService: UserService
        +loadUserByUsername(email: String): UserDetails
    }
}

package "Repository Layer" {
    interface RefreshTokenRepository {
        +saveToken(refreshToken: RefreshToken): RefreshToken
        +findByTokenRaw(token: String): Optional<RefreshToken>
        +deleteExpiredTokens(): void
        +revokeAllUserTokens(userEmail: String): void
        +count(): long
    }
    
    interface JpaRefreshTokenRepository {
        +deleteByExpiryDateBefore(date: Instant): void
        +findByUserEmailOrderByCreatedAtDesc(userEmail: String): List<RefreshToken>
        +countByUserEmail(userEmail: String): long
    }
    
    class PostgreSQLRefreshTokenRepository {
        -jdbcTemplate: JdbcTemplate
        +saveToken(refreshToken: RefreshToken): RefreshToken
        +findByTokenRaw(token: String): Optional<RefreshToken>
        +deleteExpiredTokens(): void
        +revokeAllUserTokens(userEmail: String): void
        -insert(token: RefreshToken): RefreshToken
        -update(token: RefreshToken): RefreshToken
    }
    
    interface PasswordResetRepository {
        +save(passwordResetToken: PasswordResetToken): PasswordResetToken
        +findByToken(token: String): Optional<PasswordResetToken>
        +deleteExpiredTokens(): void
        +deleteByUserEmail(userEmail: String): void
        +countByUserEmail(userEmail: String): long
    }
    
    interface RoleRepository {
        +findAll(): List<Role>
        +findById(id: UUID): Optional<Role>
        +save(role: Role): Role
        +deleteById(id: UUID): void
        +existsByName(name: String): boolean
        +isRoleAssignedToUsers(roleId: UUID): boolean
    }
    
    interface "UserRepository<U, ID>" as UserRepository
}

package "Auto Configuration" {
    class AuthAutoConfiguration {
        +jwtService(authProperties: AuthProperties): JwtService
        +passwordPolicyService(authProperties: AuthProperties): PasswordPolicyService
        +userService(userRepository: UserRepository): UserService
        +refreshTokenService(refreshTokenRepository: RefreshTokenRepository, userService: UserService, authProperties: AuthProperties): RefreshTokenService
        +refreshTokenCleanupService(refreshTokenRepository: RefreshTokenRepository, authProperties: AuthProperties): RefreshTokenCleanupService
        +userDetailsService(userService: UserService): UserDetailsServiceImpl
        +postgresqlRefreshTokenRepository(dataSource: DataSource, authProperties: AuthProperties): PostgreSQLRefreshTokenRepository
        +passwordResetService(passwordResetRepository: PasswordResetRepository, userService: UserService, emailService: EmailService, authProperties: AuthProperties): PasswordResetService
        +roleService(roleRepository: RoleRepository, userService: UserService): RoleService
        +emailService(mailSender: JavaMailSender, authProperties: AuthProperties): EmailService
    }
    
    class OpenApiConfig {
        -authProperties: AuthProperties
        +openApi(): OpenAPI
        +securityScheme(): SecurityScheme
        +securityRequirement(): SecurityRequirement
        +info(): Info
        +contact(): Contact
    }
    
    class AuthProperties {
        -enabled: boolean
        -jwt: Jwt
        -refreshTokens: RefreshTokens
        -passwordPolicy: PasswordPolicy
        -passwordReset: PasswordReset
        -email: Email
        -openapi: OpenApi
        -controllers: Controllers
    }
}

' Implementation relationships
UserServiceImpl .up.|> UserService
JwtServiceImpl .up.|> JwtService
PasswordPolicy .up.|> PasswordPolicyService
RefreshTokenServiceImpl .up.|> RefreshTokenService
PasswordResetServiceImpl .up.|> PasswordResetService
RoleServiceImpl .up.|> RoleService
UserDetailsServiceImpl .up.|> UserDetailsService
JpaRefreshTokenRepository .up.|> RefreshTokenRepository
PostgreSQLRefreshTokenRepository .up.|> RefreshTokenRepository

' Dependency relationships
AuthAutoConfiguration --> UserService : creates
AuthAutoConfiguration --> JwtService : creates
AuthAutoConfiguration --> PasswordPolicyService : creates
AuthAutoConfiguration --> RefreshTokenService : creates
AuthAutoConfiguration --> RefreshTokenCleanupService : creates
AuthAutoConfiguration --> UserDetailsService : creates
AuthAutoConfiguration --> RefreshTokenRepository : creates (conditional)
AuthAutoConfiguration --> PasswordResetService : creates
AuthAutoConfiguration --> RoleService : creates
AuthAutoConfiguration --> EmailService : creates
AuthAutoConfiguration --> OpenApiConfig : creates (conditional)

UserServiceImpl --> UserRepository : uses
RefreshTokenServiceImpl --> RefreshTokenRepository : uses
RefreshTokenServiceImpl --> UserService : uses
RefreshTokenCleanupService --> RefreshTokenRepository : uses
UserDetailsServiceImpl --> UserService : uses
PasswordResetServiceImpl --> PasswordResetRepository : uses
PasswordResetServiceImpl --> UserService : uses
PasswordResetServiceImpl --> EmailService : uses
RoleServiceImpl --> RoleRepository : uses
RoleServiceImpl --> UserService : uses

note top of AuthAutoConfiguration #E8F4FD
  **Spring Boot Auto-Configuration**
  Conditionally creates beans based on
  configuration properties and available
  implementations. Enhanced in v4.0.0 with
  password reset, role management, and OpenAPI
end note

note right of RefreshTokenServiceImpl #E8F4FD
  **ðŸ†• Refresh Token Service (v1.2.0)**
  Manages complete token lifecycle
  with automatic rotation and
  configurable cleanup
end note

note bottom of PostgreSQLRefreshTokenRepository #E8F4FD
  **ðŸ†• PostgreSQL Repository (v1.2.0)**
  Native query implementation with
  proper timestamp handling and
  optimized performance
end note

note right of RefreshTokenCleanupService #E8F4FD
  **ðŸ†• Cleanup Service (v1.2.0)**
  Scheduled cleanup of expired
  tokens with configurable
  intervals
end note

note left of JpaRefreshTokenRepository #E8F4FD
  **ðŸ†• JPA Repository (v1.2.0)**
  Standard JPA implementation
  with resolved interface
  conflicts
end note

note right of PasswordResetServiceImpl #E8F4FD
  **ðŸ†• Password Reset Service (v4.0.0)**
  OWASP-compliant password reset
  with email integration, secure
  token generation, and cleanup
end note

note right of RoleServiceImpl #E8F4FD
  **ðŸ†• Role Management Service (v4.0.0)**
  Complete CRUD operations with
  ADMIN authorization and user
  assignment validation
end note

note left of EmailService #E8F4FD
  **ðŸ†• Email Service (v4.0.0)**
  Email integration for password
  reset notifications with
  customizable templates
end note

note bottom of OpenApiConfig #E8F4FD
  **ðŸ†• OpenAPI Configuration (v4.0.0)**
  Complete Swagger/OpenAPI 3.0
  integration with security schemes
  and interactive documentation
end note

@enduml