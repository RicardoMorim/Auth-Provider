@startuml Auth Starter - Repository Architecture

!theme sketchy-outline
skinparam backgroundColor #FEFEFE
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D
skinparam noteBackgroundColor #E8F4FD
skinparam noteBorderColor #2C5282
skinparam noteFontColor #1A202C

title Ricardo Auth Starter - Repository Architecture (v4.0.0)

package "Spring Data JPA" {
    interface "JpaRepository<T, ID>" as JpaRepository {
        +save(entity: T): T
        +findById(id: ID): Optional<T>
        +findAll(): List<T>
        +deleteById(id: ID): void
        +count(): long
    }
}

package "User Repository Architecture" {
    interface "UserRepository<U, R, ID>" as UserRepository {
        +findByEmail(email: String): Optional<U>
        +existsByEmail(email: String): boolean
        +deleteById(id: ID): void
    }
    
    interface "UserJpaRepository<U, R, ID>" as UserJpaRepository {
        +findByEmail_Email(email: String): Optional<U>
        +findByUsername_Username(username: String): Optional<U>
        +existsByEmail_Email(email: String): boolean
        +existsByUsername_Username(username: String): boolean
    }
    
    interface DefaultUserJpaRepository {
        ' Default implementation for DefaultUser, Role, and UUID
    }
    
    ' NEW: PostgreSQL Native User Repository
    class "UserPostgreSQLRepository<U, R, ID>" as UserPostgreSQLRepository {
        -jdbcTemplate: JdbcTemplate
        -userRowMapper: UserRowMapper<U>
        -userSqlParameterMapper: UserSqlParameterMapper<U>
        -idConverter: IdConverter<ID>
        +findByEmail(email: String): Optional<U>
        +existsByEmail(email: String): boolean
        +save(user: U): U
        +deleteById(id: ID): void
        +findById(id: ID): Optional<U>
    }
    
    UserJpaRepository --|> UserRepository
    UserJpaRepository --|> JpaRepository
    DefaultUserJpaRepository --|> UserJpaRepository
    UserPostgreSQLRepository --|> UserRepository
}

package "Refresh Token Repository Architecture" {
    interface RefreshTokenRepository {
        +saveToken(refreshToken: RefreshToken): RefreshToken
        +findByTokenRaw(token: String): Optional<RefreshToken>
        +findByToken(token: String): Optional<RefreshToken>
        +deleteExpiredTokens(): void
        +revokeAllUserTokens(userEmail: String): void
        +count(): long
    }
    
    interface JpaRefreshTokenRepository {
        +findByTokenRaw(token: String): Optional<RefreshToken>
        +deleteByExpiryDateBefore(date: Instant): void
        +deleteByUserEmail(userEmail: String): void
        +findByUserEmailOrderByCreatedAtDesc(userEmail: String): List<RefreshToken>
        +countByUserEmail(userEmail: String): long
        +default saveToken(refreshToken: RefreshToken): RefreshToken
    }
    
    interface DefaultJpaRefreshTokenRepository {
        ' Default JPA implementation
    }
    
    class PostgreSQLRefreshTokenRepository {
        -jdbcTemplate: JdbcTemplate
        -tableName: String
        +saveToken(refreshToken: RefreshToken): RefreshToken
        +findByTokenRaw(token: String): Optional<RefreshToken>
        +findByToken(token: String): Optional<RefreshToken>
        +deleteExpiredTokens(): void
        +revokeAllUserTokens(userEmail: String): void
        +count(): long
        -insert(token: RefreshToken): RefreshToken
        -update(token: RefreshToken): RefreshToken
        -mapRowToRefreshToken(rs: ResultSet): RefreshToken
    }
    
    JpaRefreshTokenRepository --|> RefreshTokenRepository
    JpaRefreshTokenRepository --|> JpaRepository
    DefaultJpaRefreshTokenRepository --|> JpaRefreshTokenRepository
    PostgreSQLRefreshTokenRepository --|> RefreshTokenRepository
}

package "Password Reset Repository Architecture" {
    interface PasswordResetRepository {
        +save(passwordResetToken: PasswordResetToken): PasswordResetToken
        +findByToken(token: String): Optional<PasswordResetToken>
        +findByUserEmail(userEmail: String): List<PasswordResetToken>
        +deleteExpiredTokens(): void
        +deleteByUserEmail(userEmail: String): void
        +markTokenAsUsed(token: String): void
        +countByUserEmail(userEmail: String): long
    }
    
    interface JpaPasswordResetRepository {
        +findByToken(token: String): Optional<PasswordResetToken>
        +findByUserEmailOrderByCreatedAtDesc(userEmail: String): List<PasswordResetToken>
        +deleteByExpiryDateBefore(date: Instant): void
        +deleteByUserEmail(userEmail: String): void
        +countByUserEmail(userEmail: String): long
    }
    
    interface DefaultJpaPasswordResetRepository {
        ' Default JPA implementation for PasswordResetToken
    }
    
    JpaPasswordResetRepository --|> PasswordResetRepository
    JpaPasswordResetRepository --|> JpaRepository
    DefaultJpaPasswordResetRepository --|> JpaPasswordResetRepository
}

package "Role Management Repository Architecture" {
    interface RoleRepository {
        +findAll(): List<Role>
        +findById(id: UUID): Optional<Role>
        +save(role: Role): Role
        +deleteById(id: UUID): void
        +existsByName(name: String): boolean
        +isRoleAssignedToUsers(roleId: UUID): boolean
        +findByName(name: String): Optional<Role>
    }
    
    interface JpaRoleRepository {
        +findByName(name: String): Optional<Role>
        +existsByName(name: String): boolean
        +isRoleAssignedToUsers(roleId: UUID): boolean
    }
    
    interface DefaultJpaRoleRepository {
        ' Default JPA implementation for Role
    }
    
    JpaRoleRepository --|> RoleRepository
    JpaRoleRepository --|> JpaRepository
    DefaultJpaRoleRepository --|> JpaRoleRepository
}

package "Helper Classes" {
    ' PostgreSQL Helper Classes
    interface "UserRowMapper<U>" as UserRowMapper {
        +mapRow(rs: ResultSet, rowNum: int): U
    }
    
    interface "UserSqlParameterMapper<U>" as UserSqlParameterMapper {
        +mapToSqlParameterSource(user: U): SqlParameterSource
    }
    
    interface "IdConverter<ID>" as IdConverter {
        +convert(id: Object): ID
        +convertToString(id: ID): String
    }
    
    class UUIDConverter {
        +convert(id: Object): UUID
        +convertToString(id: UUID): String
    }
    
    UUIDConverter --|> IdConverter
    UserPostgreSQLRepository --> UserRowMapper : uses
    UserPostgreSQLRepository --> UserSqlParameterMapper : uses
    UserPostgreSQLRepository --> IdConverter : uses
}

package "Factory Pattern" {
    interface "AuthUserFactory<R>" as AuthUserFactory {
        +createAuthUser(username: String, email: String, password: String, roles: Set<R>): AuthUser<R>
        +createAuthUser(email: String, password: String, roles: Set<R>): AuthUser<R>
        +createAuthUser(email: String, password: String, role: R): AuthUser<R>
    }
    
    interface "UserFactory<U, R, ID>" as UserFactory {
        +createUser(username: String, email: String, password: String, roles: Set<R>): U
        +createUser(email: String, password: String, roles: Set<R>): U
        +createUser(email: String, password: String, role: R): U
    }
    
    class DefaultUserFactory {
        +createUser(username: String, email: String, password: String, roles: Set<Role>): DefaultUser
        +createUser(email: String, password: String, roles: Set<Role>): DefaultUser
        +createUser(email: String, password: String, role: Role): DefaultUser
    }
    
    DefaultUserFactory --|> UserFactory
    DefaultUserFactory --|> AuthUserFactory
}


package "Configuration" {
    class AuthAutoConfiguration {
        +defaultUserJpaRepository(): DefaultUserJpaRepository
        +defaultJpaRefreshTokenRepository(): DefaultJpaRefreshTokenRepository
        +postgresqlRefreshTokenRepository(dataSource: DataSource): PostgreSQLRefreshTokenRepository
        +defaultJpaPasswordResetRepository(): DefaultJpaPasswordResetRepository
        +defaultJpaRoleRepository(): DefaultJpaRoleRepository
    }
    
    class AuthProperties {
        -refreshTokens: RefreshTokens
        -passwordReset: PasswordReset
        -openapi: OpenApi
    }
    
    class "AuthProperties.RefreshTokens" as RefreshTokens {
        -repository: Repository
    }
    
    class "Repository" as RepositoryConfig {
        -type: RefreshTokenRepositoryType
    }
    
    enum RefreshTokenRepositoryType {
        JPA
        POSTGRESQL
    }
    
    AuthProperties *-- RefreshTokens
    RefreshTokens *-- RepositoryConfig
    RepositoryConfig --> RefreshTokenRepositoryType
    AuthAutoConfiguration --> RefreshTokenRepositoryType : uses for conditional creation
}

package "Conditional Bean Creation" {
    class ConditionalOnProperty {
        +prefix: String
        +name: String
        +havingValue: String
        +matchIfMissing: boolean
    }
    
    class ConditionalOnMissingBean {
        +value: Class<?>
        +name: String
    }
    
    DefaultUserJpaRepository ..> ConditionalOnMissingBean : @ConditionalOnMissingBean(name = "userRepository")
    DefaultJpaRefreshTokenRepository ..> ConditionalOnMissingBean : @ConditionalOnMissingBean(RefreshTokenRepository.class)
    DefaultJpaRefreshTokenRepository ..> ConditionalOnProperty : @ConditionalOnProperty(name = "type", havingValue = "jpa")
    PostgreSQLRefreshTokenRepository ..> ConditionalOnProperty : @ConditionalOnProperty(name = "type", havingValue = "postgresql")
    DefaultJpaPasswordResetRepository ..> ConditionalOnMissingBean : @ConditionalOnMissingBean(PasswordResetRepository.class)
    DefaultJpaRoleRepository ..> ConditionalOnMissingBean : @ConditionalOnMissingBean(RoleRepository.class)
}

note right of RefreshTokenRepository #E8F4FD
  **ðŸ†• Resolved Interface Conflicts (v1.2.0)**
  Base interface does NOT define save()
  to avoid conflicts with JpaRepository.save()
  
  - JPA implementations inherit save() from JpaRepository
  - Custom implementations provide their own save()
  - saveToken() method provides consistent API
end note

note bottom of PostgreSQLRefreshTokenRepository #E8F4FD
  **ðŸ†• PostgreSQL Implementation (v1.2.0)**
  Native JDBC implementation with:
  - Proper Timestamp handling
  - Optimized native queries
  - Custom save() method implementation
  - Connection pooling support
end note

note left of JpaRefreshTokenRepository #E8F4FD
  **ðŸ†• JPA Implementation (v1.2.0)**
  Spring Data JPA implementation with:
  - Inherits save() from JpaRepository
  - Custom @Query methods
  - Default saveToken() implementation
  - Automatic transaction management
end note

note top of AuthAutoConfiguration #E8F4FD
  **Conditional Bean Creation**
  Creates appropriate repository
  implementation based on configuration.
  Enhanced in v4.0.0 with password reset
  and role management repositories.
end note

note right of ConditionalOnProperty #E8F4FD
  **ðŸ†• Configuration-Driven Selection (v1.2.0)**
  Repository type is selected based on:
  ricardo.auth.refresh-tokens.repository.type
  
  - "jpa" â†’ JPA implementation
  - "postgresql" â†’ PostgreSQL implementation
end note

note right of UserPostgreSQLRepository #E8F4FD
  **ðŸ†• PostgreSQL User Repository (v3.0.0)**
  Native JDBC implementation with:
  - UUID primary key support
  - Type-safe generic mappers
  - Enhanced performance
  - Custom SQL queries
end note

note bottom of UUIDConverter #E8F4FD
  **ðŸ†• Helper Classes (v3.0.0)**
  Type converters and mappers for
  PostgreSQL integration and
  improved type safety with UUID support
  These classes allow for total decoupling from User entity
end note

note right of UserFactory #E8F4FD
  **ðŸ†• Factory Pattern (v3.0.0)**
  Decoupled user creation with
  type-safe generics for enhanced
  architecture flexibility and testability
end note

note right of PasswordResetRepository #E8F4FD
  **ðŸ†• Password Reset Repository (v4.0.0)**
  Repository for secure password reset tokens:
  - Time-based expiration handling
  - One-time use token management
  - User-based token cleanup
  - OWASP-compliant implementation
end note

note bottom of RoleRepository #E8F4FD
  **ðŸ†• Role Management Repository (v4.0.0)**
  Repository for role management:
  - CRUD operations for roles
  - Role assignment validation
  - Name uniqueness enforcement
  - User role relationship tracking
end note

@enduml
