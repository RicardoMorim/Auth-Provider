@startuml Auth Starter - Security Flow

!theme sketchy-outline
skinparam backgroundColor #FEFEFE
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D
skinparam noteBackgroundColor #E8F4FD
skinparam noteBorderColor #2C5282
skinparam noteFontColor #1A202C

title Ricardo Auth Starter - Security Architecture & Flow (v2.0.0)

package "Security Components" {
    class JwtAuthFilter {
        -jwtService: JwtService
        -tokenBlocklist: TokenBlocklist
        +doFilterInternal(request: HttpServletRequest, response: HttpServletResponse, filterChain: FilterChain): void
        ' Extracts JWT from access_token cookie
    }
    
    class SecurityConfig {
        -jwtAuthFilter: JwtAuthFilter
        -userDetailsService: UserDetailsService
        +filterChain(HttpSecurity): SecurityFilterChain
        +authenticationProvider(): DaoAuthenticationProvider
        +passwordEncoder(): PasswordEncoder
        +authenticationManager(AuthenticationConfiguration): AuthenticationManager
        +authenticationEntryPoint(): AuthenticationEntryPoint
    }
    
    class JwtServiceImpl {
        -secret: String
        -accessTokenExpiration: long
        -key: Key
        +generateAccessToken(subject: String, authorities: Collection<GrantedAuthority>): String
        +extractSubject(token: String): String
        +isTokenValid(token: String): boolean
        +isTokenValid(token: String, email: String): boolean
        +extractRoles(token: String): List<String>
        -extractClaim(token: String, claimsResolver: Function<Claims, T>): T
        -extractAllClaims(token: String): Claims
        -isTokenExpired(token: String): boolean
        -extractExpiration(token: String): Date
        -createToken(claims: Map<String, Object>, subject: String): String
        -getKey(): Key
    }
    
    class UserDetailsServiceImpl {
        -userService: UserService
        +loadUserByUsername(email: String): UserDetails
    }
    
    interface PasswordPolicyService {
        +validatePassword(password: String): boolean
        +generateSecurePassword(): String
    }
    
    class PasswordPolicy {
        -requireUpperCase: boolean
        -requireLowerCase: boolean
        -requireDigit: boolean
        -requireSpecialChar: boolean
        -preventCommonPasswords: boolean
        -commonPasswords: Set<String>
        +validatePassword(password: String): boolean
        +generateSecurePassword(): String
        -validateLength(password: String): void
        -validateCharacterRequirements(password: String): void
        -validateCommonPassword(password: String): void
    }
    
    class UserSecurityService {
        -userService: UserService
        +isOwner(email: String, userId: Long): boolean
    }

    ' NEW: Blocklist & Rate Limiter
    interface TokenBlocklist {
        +revoke(token: String): void
        +isRevoked(token: String): boolean
    }
    class InMemoryTokenBlocklist {
        +revoke(token: String): void
        +isRevoked(token: String): boolean
    }
    class RedisTokenBlockList {
        +revoke(token: String): void
        +isRevoked(token: String): boolean
    }
    interface RateLimiter {
        +isEnabled(): boolean
        +allowRequest(key: String): boolean
    }
    class InMemoryRateLimiter {
        +isEnabled(): boolean
        +allowRequest(key: String): boolean
    }
    class RedisRateLimiter {
        +isEnabled(): boolean
        +allowRequest(key: String): boolean
    }
    class RateLimiterFilter {
        -rateLimiter: RateLimiter
        +doFilterInternal(request: HttpServletRequest, response: HttpServletResponse, filterChain: FilterChain): void
    }
    TokenBlocklist <|.. InMemoryTokenBlocklist
    TokenBlocklist <|.. RedisTokenBlockList
    RateLimiter <|.. InMemoryRateLimiter
    RateLimiter <|.. RedisRateLimiter
}

package "Controllers" {
    class AuthController {
        -jwtService: JwtService
        -authenticationManager: AuthenticationManager
        -refreshTokenService: RefreshTokenService
        -authProperties: AuthProperties
        -blocklist: TokenBlocklist
        +login(request: LoginRequestDTO): ResponseEntity<TokenResponse>
        +refreshToken(request: RefreshTokenRequest): ResponseEntity<TokenResponse>   
        +getAuthenticatedUser(authentication: Authentication): ResponseEntity<AuthenticatedUserDTO>
        +revokeToken(token: String): ResponseEntity
    }
    
    class UserController {
        -userService: UserService
        -passwordEncoder: PasswordEncoder
        -passwordPolicyService: PasswordPolicyService
        +createUser(request: CreateUserRequestDTO): ResponseEntity<UserDTO>
        +getUserById(id: Long): ResponseEntity<UserDTO>
        +getUserByEmail(email: String): ResponseEntity<UserDTO>
        +updateUser(id: Long, request: CreateUserRequestDTO): ResponseEntity<UserDTO>
        +deleteUser(id: Long): ResponseEntity<Void>
    }
}

package "Refresh Token System" {
    interface "RefreshTokenService<U, ID>" as RefreshTokenService {
        +createRefreshToken(user: U): RefreshToken
        +findByToken(token: String): Optional<RefreshToken>
        +verifyExpiration(token: RefreshToken): RefreshToken
        +deleteByToken(token: String): void
        +deleteAllByUserEmail(userEmail: String): void
    }
    
    class RefreshTokenServiceImpl {
        -refreshTokenRepository: RefreshTokenRepository
        -userService: UserService
        -authProperties: AuthProperties
        +createRefreshToken(user: AuthUser): RefreshToken
        +findByToken(token: String): Optional<RefreshToken>
        +verifyExpiration(token: RefreshToken): RefreshToken
        +deleteByToken(token: String): void
        +deleteAllByUserEmail(userEmail: String): void
        -generateTokenValue(): String
        -isTokenLimitExceeded(userEmail: String): boolean
        -cleanupOldestTokensForUser(userEmail: String): void
    }
    
    class RefreshTokenCleanupService {
        -refreshTokenRepository: RefreshTokenRepository
        -authProperties: AuthProperties
        +cleanupExpiredTokens(): void
        +cleanupExpiredTokensForUser(userEmail: String): void
    }
    
    class RefreshToken {
        -id: Long
        -token: String
        -userEmail: String
        -expiryDate: Instant
        -createdAt: Instant
        +isExpired(): boolean
        +verifyExpiration(): RefreshToken
    }
    
    class RefreshTokenRequest {
        -refreshToken: String
        +getRefreshToken(): String
    }
    
    class TokenResponse {
        -accessToken: String
        -refreshToken: String
        +TokenResponse(accessToken: String, refreshToken: String)
    }
}

package "Domain Layer" {
    class Password {
        -hashed: String
        +valueOf(raw: String, encoder: PasswordEncoder): Password
        +matches(raw: String, encoder: PasswordEncoder): boolean
    }
    
    class User {
        -id: Long
        -username: Username
        -email: Email
        -password: Password
        -roles: Set<AppRole>
        +getAuthorities(): Collection<GrantedAuthority>
        +isAccountNonExpired(): boolean
        +isAccountNonLocked(): boolean
        +isCredentialsNonExpired(): boolean
        +isEnabled(): boolean
    }
}

package "Spring Security" <<Rectangle>> {
    interface OncePerRequestFilter
    interface UserDetailsService
    interface AuthenticationManager
    interface DaoAuthenticationProvider
    interface BCryptPasswordEncoder
}

package "Exception Handling" {
    class GlobalExceptionHandler {
        +handleAuthenticationException(ex: AuthenticationException): ResponseEntity<ErrorResponse>
        +handleAccessDeniedException(ex: AccessDeniedException): ResponseEntity<ErrorResponse>
        +handleTokenExpiredException(ex: TokenExpiredException): ResponseEntity<ErrorResponse>
        +handleResourceNotFoundException(ex: ResourceNotFoundException): ResponseEntity<ErrorResponse>
    }
    
    class TokenExpiredException {
        +TokenExpiredException(message: String)
    }
}

' Implementation relationships
JwtAuthFilter .up.|> OncePerRequestFilter
UserDetailsServiceImpl .up.|> UserDetailsService
PasswordPolicy .up.|> PasswordPolicyService
RefreshTokenServiceImpl .up.|> RefreshTokenService
InMemoryTokenBlocklist .up.|> TokenBlocklist
RedisTokenBlocklist .up.|> TokenBlocklist
InMemoryRateLimiter .up.|> RateLimiter
RedisRateLimiter .up.|> RateLimiter
RateLimiterFilter .up.|> OncePerRequestFilter

' Security configuration relationships
SecurityConfig --> JwtAuthFilter : configures
SecurityConfig --> UserDetailsServiceImpl : uses
SecurityConfig --> BCryptPasswordEncoder : creates
SecurityConfig --> DaoAuthenticationProvider : creates
SecurityConfig --> AuthenticationManager : creates
SecurityConfig --> RateLimiterFilter : adds

' Controller relationships
AuthController --> JwtServiceImpl : uses
AuthController --> AuthenticationManager : uses
AuthController --> RefreshTokenService : uses
AuthController --> TokenBlocklist : uses
UserController --> PasswordPolicyService : uses for validation
UserController --> UserService : uses

' Security filter relationships
JwtAuthFilter --> JwtServiceImpl : validates tokens
JwtAuthFilter --> TokenBlocklist : checks revocation
JwtAuthFilter --> SecurityConfig : checks public endpoints
RateLimiterFilter --> RateLimiter : enforces rate limit
UserDetailsServiceImpl --> UserService : loads user data

' Domain relationships
Password --> PasswordPolicyService : validates with
User --> Password : contains

' Refresh token relationships
RefreshTokenServiceImpl --> RefreshTokenRepository : uses
RefreshTokenServiceImpl --> UserService : uses
RefreshTokenCleanupService --> RefreshTokenRepository : uses
RefreshToken --> TokenExpiredException : throws when expired

' Exception handling
GlobalExceptionHandler --> TokenExpiredException : handles
GlobalExceptionHandler --> AuthenticationException : handles
GlobalExceptionHandler --> AccessDeniedException : handles

note right of JwtAuthFilter #E8F4FD
  **Filter Chain Integration**
  Intercepts requests and validates
  JWT tokens from cookies before
  reaching controllers. Checks blocklist.
end note

note top of SecurityConfig #E8F4FD
  **Spring Security Configuration**
  Configures authentication, authorization,
  JWT & rate limiting filter chain integration
end note

note right of RateLimiterFilter #E8F4FD
  **Rate Limiting (v2.0.0)**
  In-memory or Redis, per-user/IP
  request limiting for all endpoints
end note

note right of TokenBlocklist #E8F4FD
  **Blocklist (v2.0.0)**
  In-memory or Redis for token revocation
  (access & refresh tokens)
end note

note right of AuthController #E8F4FD
  **Cookie-based Auth (v2.0.0)**
  All tokens are set/read via
  secure, HttpOnly cookies only.
  Includes /api/auth/revoke endpoint
  for admin token revocation.
end note

note right of RefreshTokenServiceImpl #E8F4FD
  **Refresh Token Service (v1.2.0)**
  Manages secure token lifecycle
  with automatic rotation, cleanup,
  and user token limits
end note

note right of UserController #E8F4FD
  **Password Policy Integration**
  Validates passwords during
  user creation and updates
end note

note left of Password #E8F4FD
  **Policy-Aware Value Object**
  Password validation happens
  at domain object creation
end note

@enduml