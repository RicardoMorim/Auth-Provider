@startuml Auth Starter - Domain Model

!theme sketchy-outline
skinparam backgroundColor #FEFEFE
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D
skinparam noteBackgroundColor #E8F4FD
skinparam noteBorderColor #2C5282
skinparam noteFontColor #1A202C

title Ricardo Auth Starter - Domain Model (v3.0.0)

package "User Domain" {
    interface "AuthUser<R>" as AuthUser {
        +getId(): UUID
        +getEmail(): String
        +getUsername(): String
        +getRoles(): Set<R>
        +getAuthorities(): Collection<GrantedAuthority>
    }

    class User {
        -id: UUID
        -version: Long
        -username: Username
        -email: Email
        -password: Password
        -roles: Set<AppRole>
        -createdAt: Instant
        -updatedAt: Instant
        +User(username: Username, email: Email, password: Password)
    }

    class Username {
        -username: String
        +valueOf(username: String): Username
        +getUsername(): String
        -validateUsername(username: String): void
    }

    class Email {
        -email: String
        +valueOf(email: String): Email
        +getEmail(): String
        -validateEmail(email: String): void
    }

    class Password {
        -hashed: String
        +valueOf(raw: String, encoder: PasswordEncoder): Password
        +fromHash(hashedPassword: String): Password
        +matches(raw: String, encoder: PasswordEncoder): boolean
    }

    enum AppRole {
        USER
        ADMIN
        VIP
        +getAuthority(): String
    }

    User .up.|> AuthUser
    User *-- Username : contains
    User *-- Email : contains
    User *-- Password : contains
    User o-- AppRole : has many
}

package "Refresh Token Domain" {
    class RefreshToken {
        -id: UUID
        -token: String
        -userEmail: String
        -expiryDate: Instant
        -createdAt: Instant
        +RefreshToken(token: String, userEmail: String, expiryDate: Instant)
        +isExpired(): boolean
        +verifyExpiration(): RefreshToken
    }
    
    class RefreshTokenRequest {
        -refreshToken: String
        +RefreshTokenRequest(refreshToken: String)
        +getRefreshToken(): String
        +toString(): String
    }
    
    class TokenExpiredException {
        +TokenExpiredException(message: String)
    }
    
    RefreshToken --> TokenExpiredException : throws when expired
}

package "Password Policy" {
    interface PasswordPolicyService {
        +validatePassword(password: String): boolean
        +generateSecurePassword(): String
    }

    class PasswordPolicy {
        -minLength: int
        -maxLength: int
        -requireUpperCase: boolean
        -requireLowerCase: boolean
        -requireDigit: boolean
        -requireSpecialChar: boolean
        -specialCharacters: String
        -preventCommonPasswords: boolean
        -commonPasswords: Set<String>
        +validatePassword(password: String): boolean
        +generateSecurePassword(): String
        -validateLength(password: String): void
        -validateCharacterRequirements(password: String): void
        -validateCommonPassword(password: String): void
    }

    PasswordPolicy .up.|> PasswordPolicyService
    Password --> PasswordPolicyService : validates with
}

package "Core Services" {
    interface "UserService<U, R, ID>" as UserService {
        +createUser(user: U): U
        +getUserById(id: ID): U
        +getUserByEmail(email: String): U
        +updateUser(id: ID, user: U): U
        +deleteUser(id: ID): void
    }
    
    interface JwtService {
        +generateAccessToken(subject: String, authorities: Collection<GrantedAuthority>): String
        +extractSubject(token: String): String
        +isTokenValid(token: String): boolean
        +isTokenValid(token: String, email: String): boolean
    }
    
    interface "RefreshTokenService<U, ID>" as RefreshTokenService {
        +createRefreshToken(user: U): RefreshToken
        +findByToken(token: String): Optional<RefreshToken>
        +verifyExpiration(token: RefreshToken): RefreshToken
        +deleteByToken(token: String): void
        +deleteAllByUserEmail(userEmail: String): void
    }
    
    UserService --> User : manages
    RefreshTokenService --> RefreshToken : manages
    JwtService --> User : creates tokens for
}

note right of AuthUser #E8F4FD
  **Polymorphic Design**
  Generic interface allows
  custom role types and
  user implementations
end note

note bottom of Username #E8F4FD
  **Value Objects**
  Immutable with built-in
  validation logic
end note

note right of RefreshToken #E8F4FD
  **ðŸ†• Refresh Token (v1.2.0)**
  Secure token storage with
  expiration validation and
  automatic cleanup support
end note

note right of PasswordPolicy #E8F4FD
  **Enhanced Password Policy (v1.2.0)**
  Configurable validation rules
  with common password detection
  and secure generation
end note

note bottom of RefreshTokenService #E8F4FD
  **ðŸ†• Refresh Token Service (v1.2.0)**
  Complete token lifecycle
  management with rotation
  and cleanup capabilities
end note

@enduml
