@startuml Auth Starter - Deployment Architecture

!theme sketchy-outline
skinparam backgroundColor #FEFEFE
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D
skinparam noteBackgroundColor #E8F4FD
skinparam noteBorderColor #2C5282
skinparam noteFontColor #1A202C

title Ricardo Auth Starter - Deployment Architecture (v2.0.0)

package "Client Applications" {
    node "Web Frontend" {
        component "React/Vue/Angular" as WebApp
        component "Token Management" as TokenMgmt
        component "HTTP Client" as HttpClient

        WebApp --> TokenMgmt
        TokenMgmt --> HttpClient
    }

    node "Mobile App" {
        component "iOS/Android" as MobileApp
        component "Secure Storage" as SecureStorage
        component "API Client" as APIClient

        MobileApp --> SecureStorage
        SecureStorage --> APIClient
    }


}

package "Spring Boot Application" {
    node "Web Layer" {
        component "AuthController" as AuthCtrl
        component "UserController" as UserCtrl
        component "JwtAuthFilter" as JwtFilter
        component "SecurityConfig" as SecConfig

        JwtFilter --> AuthCtrl
        JwtFilter --> UserCtrl

        ' NEW: Rate Limiter and Blocklist
        component "RateLimiterFilter" as RateLimiterF
        component "TokenBlocklist (InMemory/Redis)" as Blocklist
        component "RateLimiter (InMemory/Redis)" as RateLimiter

        SecConfig --> JwtFilter
        SecConfig --> RateLimiterF
        AuthCtrl --> Blocklist
        JwtFilter --> Blocklist
        RateLimiterF --> RateLimiter
    }

    node "Service Layer" {
        component "JwtServiceImpl" as JwtSvc
        component "RefreshTokenServiceImpl" as RefreshSvc
        component "UserServiceImpl" as UserSvc
        component "PasswordPolicy" as PassPol
        component "RefreshTokenCleanupService" as RefreshCleanup

        AuthCtrl --> JwtSvc
        AuthCtrl --> RefreshSvc
        AuthCtrl --> UserSvc
        UserCtrl --> UserSvc
        UserCtrl --> PassPol
        RefreshSvc --> RefreshCleanup
    }

    node "Repository Layer" {
        component "UserRepository" as UserRepo
        component "RefreshTokenRepository (JPA/PostgreSQL)" as RefreshRepo
        UserSvc --> UserRepo
        RefreshSvc --> RefreshRepo
        RefreshCleanup --> RefreshRepo
    }
}
  ' NEW: Client-to-API connections
    HttpClient --> AuthCtrl : HTTPS (REST API)
    HttpClient --> UserCtrl : HTTPS (REST API)
    APIClient --> AuthCtrl : HTTPS (REST API)
    APIClient --> UserCtrl : HTTPS (REST API)
' NEW: Redis and Database nodes
node "Redis" {
    database "Redis DB" as RedisDB
    Blocklist --> RedisDB : if Redis
    RateLimiter --> RedisDB : if Redis
}

node "Database" {
    database "PostgreSQL/MySQL/Other" as SQLDB
    UserRepo --> SQLDB
    RefreshRepo --> SQLDB
}

' NEW: Notes for cookies, blocklist, rate limiting
note right of AuthCtrl #E8F4FD
  **Cookie-based Auth (v2.0.0)**\nTokens are set/read via\nsecure, HttpOnly cookies.\nBlocklist and rate limiting\nare enforced for all endpoints.
end note

note right of Blocklist #E8F4FD
  **Blocklist**\nIn-memory or Redis\nfor token revocation.
end note

note right of RateLimiter #E8F4FD
  **Rate Limiting**\nIn-memory or Redis\nper-user/IP request limiting.
end note

@enduml