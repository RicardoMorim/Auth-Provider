@startuml Ricardo Auth Spring Boot Starter - Class Diagram

!define SPOTLESS_THEME
!theme sketchy-outline
skinparam backgroundColor #FEFEFE
skinparam classBackgroundColor #F8F9FA
skinparam classBorderColor #6C757D
skinparam arrowColor #495057
skinparam noteBackgroundColor #E8F4FD
skinparam noteBorderColor #2C5282
skinparam noteFontColor #1A202C
skinparam noteFontStyle bold
skinparam padding 10
skinparam classFontSize 11
skinparam packageFontSize 12

title Ricardo Auth Spring Boot Starter\nArchitecture Overview (v4.0.0)

!define DIRECTION left to right

package "Domain Layer" <<Rectangle>> {
    
    interface "AuthUser<R>" as AuthUser {
        +getId(): ID
        +getEmail(): String
        +setEmail(email: String): void
        +getUsername(): String
        +setUsername(username: String): void
        +getPassword(): String
        +setPassword(hashedPassword: String): void
        +getRoles(): Set<R>
        +addRole(role: R): void
        +removeRole(role: R): void
        +getAuthorities(): Collection<GrantedAuthority>
    }
    
    class User {
        -id: UUID
        -version: Long
        -username: Username
        -email: Email
        -password: Password
        -roles: Set<AppRole>
        -createdAt: Instant
        -updatedAt: Instant
        +User(username: Username, email: Email, password: Password)
        +isAccountNonExpired(): boolean
        +isAccountNonLocked(): boolean
        +isCredentialsNonExpired(): boolean
        +isEnabled(): boolean
    }
    
    class Username {
        -username: String
        +valueOf(username: String): Username
        +getUsername(): String
        -validateUsername(username: String): void
    }
    
    class Email {
        -email: String
        +valueOf(email: String): Email
        +getEmail(): String
        -validateEmail(email: String): void
    }
    
    class Password {
        -hashed: String
        +valueOf(raw: String, encoder: PasswordEncoder): Password
        +fromHash(hashedPassword: String): Password
        +getHashed(): String
        +matches(raw: String, encoder: PasswordEncoder): boolean
    }
    
    enum AppRole {
        USER
        ADMIN
        VIP
        +getAuthority(): String
    }
    
    class RefreshToken {
        -id: Long
        -token: String
        -userEmail: String
        -expiryDate: Instant
        -createdAt: Instant
        +RefreshToken(token: String, userEmail: String, expiryDate: Instant)
        +isExpired(): boolean
        +verifyExpiration(): RefreshToken
    }
    
    class RefreshTokenRequest {
        -refreshToken: String
        +RefreshTokenRequest(refreshToken: String)
        +getRefreshToken(): String
    }
    
    ' NEW in v4.0.0: Password Reset Domain Objects
    class PasswordResetToken {
        -id: UUID
        -token: String
        -userEmail: String
        -expiryDate: Instant
        -createdAt: Instant
        -used: boolean
        +PasswordResetToken(token: String, userEmail: String, expiryHours: int)
        +isExpired(): boolean
        +isUsed(): boolean
        +markAsUsed(): void
    }
    
    User .up.|> AuthUser
    User *-- Username : contains
    User *-- Email : contains
    User *-- Password : contains
    User o-- AppRole : has many
}

package "Core Interfaces" <<Rectangle>> {

    interface "UserService<U, R, ID>" as UserService {
        +createUser(user: U): U
        +getUserById(id: ID): U
        +getUserByEmail(email: String): U
        +getUserByUsername(username: String): U
        +emailExists(email: String): boolean
        +usernameExists(username: String): boolean
        +updateUser(id: ID, user: U): U
        +deleteUser(id: ID): void
        +getAllUsers(): List<U>
    }

    interface JwtService {
        +generateAccessToken(subject: String, authorities: Collection<GrantedAuthority>): String
        +extractSubject(token: String): String
        +extractRoles(token: String): List<String>
        +isTokenValid(token: String): boolean
        +isTokenValid(token: String, email: String): boolean
    }

    interface PasswordPolicyService {
        +validatePassword(password: String): boolean
        +generateSecurePassword(): String
    }

    interface AuthenticatedUser {
        +getEmail(): String
        +getRoles(): List<String>
    }

    interface "RefreshTokenService<U, ID>" as RefreshTokenService {
        +createRefreshToken(user: U): RefreshToken
        +findByToken(token: String): Optional<RefreshToken>
        +verifyExpiration(token: RefreshToken): RefreshToken
        +deleteByToken(token: String): void
        +deleteAllByUserEmail(userEmail: String): void
    }
    
    ' NEW in v4.0.0: Password Reset Service
    interface PasswordResetService {
        +requestReset(email: String): void
        +validateToken(token: String): boolean
        +completeReset(token: String, newPassword: String): void
        +cleanupExpiredTokens(): void
    }
    
    ' NEW in v4.0.0: Role Management Service  
    interface "RoleService<U, R, ID>" as RoleService {
        +getUserRoles(username: String): List<R>
        +addRoleToUser(username: String, role: R): void
        +removeRoleFromUser(username: String, role: R): void
        +bulkUpdateUserRoles(username: String, roles: Set<R>): void
    }
}


package "Repository Layer" <<Rectangle>> {
    
    interface "UserRepository<U, R, ID>" as UserRepository {
        +findByEmail(email: String): Optional<U>
        +existsByEmail(email: String): boolean
        +deleteById(id: ID): void
    }
    
    interface "UserJpaRepository<U, R, ID>" as UserJpaRepository {
        +findByEmail_Email(email: String): Optional<U>
        +findByUsername_Username(username: String): Optional<U>
        +existsByEmail_Email(email: String): boolean
        +existsByUsername_Username(username: String): boolean
    }
    
    interface DefaultUserJpaRepository {
        ' Inherits from UserJpaRepository<DefaultUser, Role, UUID>
    }
    
    ' NEW: PostgreSQL Native Repository
    class "UserPostgreSQLRepository<U, R, ID>" as UserPostgreSQLRepository {
        -jdbcTemplate: JdbcTemplate
        -userRowMapper: UserRowMapper<U>
        -userSqlParameterMapper: UserSqlParameterMapper<U>
        -idConverter: IdConverter<ID>
        +findByEmail(email: String): Optional<U>
        +existsByEmail(email: String): boolean
        +save(user: U): U
        +deleteById(id: ID): void
        +findById(id: ID): Optional<U>
    }
    
    ' NEW: Refresh Token Repository Architecture
    interface RefreshTokenRepository {
        +saveToken(refreshToken: RefreshToken): RefreshToken
        +findByTokenRaw(token: String): Optional<RefreshToken>
        +findByToken(token: String): Optional<RefreshToken>
        +deleteExpiredTokens(): void
        +revokeAllUserTokens(userEmail: String): void
        +count(): long
    }
    
    interface JpaRefreshTokenRepository {
        +findByTokenRaw(token: String): Optional<RefreshToken>
        +deleteByExpiryDateBefore(date: Instant): void
        +deleteByUserEmail(userEmail: String): void
        +findByUserEmailOrderByCreatedAtDesc(userEmail: String): List<RefreshToken>
        +countByUserEmail(userEmail: String): long
    }
    
    interface DefaultJpaRefreshTokenRepository {
        ' Inherits from JpaRefreshTokenRepository
    }
    
    class PostgreSQLRefreshTokenRepository {
        -jdbcTemplate: JdbcTemplate
        -tableName: String
        +saveToken(refreshToken: RefreshToken): RefreshToken
        +findByTokenRaw(token: String): Optional<RefreshToken>
        +deleteExpiredTokens(): void
        +revokeAllUserTokens(userEmail: String): void
        +count(): long
        -insert(token: RefreshToken): RefreshToken
        -update(token: RefreshToken): RefreshToken
        -mapRowToRefreshToken(rs: ResultSet): RefreshToken
    }
    
    ' NEW in v4.0.0: Password Reset Repository
    interface PasswordResetTokenRepository {
        +save(token: PasswordResetToken): PasswordResetToken
        +findByToken(token: String): Optional<PasswordResetToken>
        +deleteExpiredTokens(): void
        +findByUserEmailAndUsedFalse(email: String): List<PasswordResetToken>
        +markAllAsUsedByUserEmail(email: String): void
    }
    
    UserJpaRepository .up.|> UserRepository
    UserJpaRepository .up.|> JpaRepository
    DefaultUserJpaRepository .up.|> UserJpaRepository
    UserPostgreSQLRepository .up.|> UserRepository
    JpaRefreshTokenRepository .up.|> RefreshTokenRepository
    JpaRefreshTokenRepository .up.|> JpaRepository
    DefaultJpaRefreshTokenRepository .up.|> JpaRefreshTokenRepository
    PostgreSQLRefreshTokenRepository .up.|> RefreshTokenRepository
    PasswordResetTokenRepository .up.|> JpaRepository
}

package "Controller Layer" <<Rectangle>> {
    
    class AuthController {
        -jwtService: JwtService
        -authenticationManager: AuthenticationManager
        -refreshTokenService: RefreshTokenService<U, ID>
        -blocklist: TokenBlocklist
        +login(request: LoginRequestDTO, response: HttpServletResponse): ResponseEntity
        +refresh(refreshTokenCookie: String, response: HttpServletResponse): ResponseEntity
        +logout(response: HttpServletResponse): ResponseEntity
        +revokeToken(token: String): ResponseEntity
        +getAuthenticatedUser(authentication: Authentication): ResponseEntity<AuthenticatedUserDTO>
    }
    
    class UserController {
        -userService: UserService<U, R, ID>
        -passwordEncoder: PasswordEncoder
        -passwordPolicyService: PasswordPolicyService
        +createUser(request: CreateUserRequestDTO): ResponseEntity<UserDTO>
        +getUserById(id: ID): ResponseEntity<UserDTO>
        +getUserByEmail(email: String): ResponseEntity<UserDTO>
        +updateUser(id: ID, request: CreateUserRequestDTO): ResponseEntity<UserDTO>
        +deleteUser(id: ID): ResponseEntity<Void>
    }
    
    ' NEW in v4.0.0: Password Reset Controller
    class PasswordResetController {
        -passwordResetService: PasswordResetService
        -userService: UserService<U, R, ID>
        +requestReset(request: PasswordResetRequest): ResponseEntity<Void>
        +completeReset(token: String, request: PasswordResetCompleteRequest): ResponseEntity<Void>
        +validateToken(token: String): ResponseEntity<Boolean>
    }
    
    ' NEW in v4.0.0: Role Management Controller
    class RoleManagementController {
        -roleService: RoleService<U, R, ID>
        -userService: UserService<U, R, ID>
        +getUserRoles(username: String): ResponseEntity<UserRolesResponse>
        +addRoleToUser(username: String, role: String): ResponseEntity<Void>
        +removeRoleFromUser(username: String, role: String): ResponseEntity<Void>
        +bulkUpdateRoles(username: String, roles: Set<String>): ResponseEntity<Void>
    }
}

package "Factory Layer" <<Rectangle>> {
    
    interface "AuthUserFactory<R>" as AuthUserFactory {
        +createAuthUser(username: String, email: String, password: String, roles: Set<R>): AuthUser<R>
        +createAuthUser(email: String, password: String, roles: Set<R>): AuthUser<R>
        +createAuthUser(email: String, password: String, role: R): AuthUser<R>
    }
    
    interface "UserFactory<U, R, ID>" as UserFactory {
        +createUser(username: String, email: String, password: String, roles: Set<R>): U
        +createUser(email: String, password: String, roles: Set<R>): U
        +createUser(email: String, password: String, role: R): U
    }
    
    class DefaultUserFactory {
        +createUser(username: String, email: String, password: String, roles: Set<Role>): DefaultUser
        +createUser(email: String, password: String, roles: Set<Role>): DefaultUser
        +createUser(email: String, password: String, role: Role): DefaultUser
    }
    
    DefaultUserFactory .up.|> UserFactory
    DefaultUserFactory .up.|> AuthUserFactory
}

package "Helper Classes" <<Rectangle>> {
    
    ' PostgreSQL Helper Classes
    interface "UserRowMapper<U>" as UserRowMapper {
        +mapRow(rs: ResultSet, rowNum: int): U
    }
    
    interface "UserSqlParameterMapper<U>" as UserSqlParameterMapper {
        +mapToSqlParameterSource(user: U): SqlParameterSource
    }
    
    interface "IdConverter<ID>" as IdConverter {
        +convert(id: Object): ID
        +convertToString(id: ID): String
    }
    
    class UUIDConverter {
        +convert(id: Object): UUID
        +convertToString(id: UUID): String
    }
    
    UUIDConverter .up.|> IdConverter
}

package "DTO Layer" <<Rectangle>> {
    
    class LoginRequestDTO {
        -email: String
        -password: String
    }
    
    class CreateUserRequestDTO {
        -username: String
        -email: String
        -password: String
    }
    
    class UserDTO {
        -id: UUID
        -username: String
        -email: String
    }
    
    class TokenDTO {
        -token: String
    }
    
    ' Updated for refresh tokens (v1.2.0)
    class TokenResponse {
        -accessToken: String
        -refreshToken: String
        +TokenResponse(accessToken: String, refreshToken: String)
    }
    
    class AuthenticatedUserDTO {
        -name: String
        -roles: List<String>
        +AuthenticatedUserDTO(name: String, authorities: Collection<GrantedAuthority>)
    }
    
    ' NEW in v4.0.0: Password Reset DTOs
    class PasswordResetRequest {
        -email: String
        +PasswordResetRequest(email: String)
    }
    
    class PasswordResetCompleteRequest {
        -token: String
        -newPassword: String
        +PasswordResetCompleteRequest(token: String, newPassword: String)
    }
    
    ' NEW in v4.0.0: Role Management DTOs
    class UserRolesResponse {
        -username: String
        -roles: List<String>
        +UserRolesResponse(username: String, roles: List<String>)
    }
    
    class UserDTOMapper {
        +{static} toDTO(user: AuthUser<?>): UserDTO
    }
    
    AuthenticatedUserDTO .up.|> AuthenticatedUser
}

package "Security Configuration" <<Rectangle>> {
    
    class SecurityConfig {
        -jwtAuthFilter: JwtAuthFilter
        -userDetailsService: UserDetailsService
        +filterChain(http: HttpSecurity): SecurityFilterChain
        +authenticationManager(config: AuthenticationConfiguration): AuthenticationManager
        +passwordEncoder(): PasswordEncoder
    }
    
    class JwtAuthFilter {
        -jwtService: JwtService
        -tokenBlocklist: TokenBlocklist
        +doFilterInternal(request: HttpServletRequest, response: HttpServletResponse, filterChain: FilterChain): void
        ' Extracts JWT from access_token cookie
    }
    
    JwtAuthFilter .up.|> OncePerRequestFilter
}

package "Auto Configuration" <<Rectangle>> {
    
    class AuthAutoConfiguration {
        +jwtService(): JwtService
        +passwordPolicyService(authProperties: AuthProperties): PasswordPolicyService
        +userService(userRepository: UserRepository, passwordPolicy: PasswordPolicyService): UserService<User, Long>
        +refreshTokenService(refreshTokenRepository: RefreshTokenRepository, userService: UserService, authProperties: AuthProperties): RefreshTokenService
        +refreshTokenCleanupService(refreshTokenRepository: RefreshTokenRepository, authProperties: AuthProperties): RefreshTokenCleanupService
        +userDetailsService(userRepository: UserRepository): UserDetailsServiceImpl
        +jwtAuthFilter(jwtService: JwtService): JwtAuthFilter
        +authController(jwtService: JwtService, authManager: AuthenticationManager, refreshTokenService: RefreshTokenService): AuthController
        +userController(userService: UserService<User, Long>, passwordEncoder: PasswordEncoder, passwordPolicyService: PasswordPolicyService): UserController
        +postgresqlRefreshTokenRepository(dataSource: DataSource, authProperties: AuthProperties): PostgreSQLRefreshTokenRepository
        +passwordResetService(passwordResetRepository: PasswordResetTokenRepository, userService: UserService, authProperties: AuthProperties): PasswordResetService
        +roleService(userService: UserService, roleMapper: RoleMapper): RoleService
    }
    
    ' NEW in v4.0.0: OpenAPI Configuration
    class OpenApiConfig {
        +openAPI(): OpenAPI
        +customOpenAPI(): OpenAPI
        +securityScheme(): SecurityScheme
    }
    
    class AuthProperties {
        -enabled: boolean
        -redirectHttps: boolean
        -jwt: Jwt
        -controllers: Controllers
        -passwordPolicy: PasswordPolicy
        -refreshTokens: RefreshTokens
        -rateLimiter: RateLimiter
        -tokenBlocklist: TokenBlocklist
        -redis: Redis
        -cookies: Cookies
        -repository: Repository
        -passwordReset: PasswordReset
        -email: Email
        -roleManagement: RoleManagement
    }
    
    class "AuthProperties.Jwt" as JwtProps {
        -secret: String
        -accessTokenExpiration: long
        -refreshTokenExpiration: long
    }
    
    class "AuthProperties.Controllers" as ControllersProps {
        -auth: Controller
        -user: Controller
    }
    
    class "AuthProperties.Controllers.Controller" as ControllerProps {
        -enabled: boolean
    }
    
    class "AuthProperties.PasswordPolicy" as PasswordPolicyProps {
        -minLength: int
        -maxLength: int
        -requireUppercase: boolean
        -requireLowercase: boolean
        -requireDigits: boolean
        -requireSpecialChars: boolean
        -allowedSpecialChars: String
        -preventCommonPasswords: boolean
        -commonPasswordsFilePath: String
    }
    
    class "AuthProperties.RefreshTokens" as RefreshTokensProps {
        -enabled: boolean
        -maxTokensPerUser: int
        -rotateOnRefresh: boolean
        -cleanupInterval: long
        -autoCleanup: boolean
    }
    
    class "AuthProperties.RateLimiter" as RateLimiterProps {
        -enabled: boolean
        -type: StorageType
        -maxRequests: int
        -timeWindowMs: long
    }
    
    class "AuthProperties.TokenBlocklist" as TokenBlocklistProps {
        -enabled: boolean
        -type: StorageType
    }
    
    class "AuthProperties.Redis" as RedisProps {
        -host: String
        -port: int
        -password: String
        -database: int
    }
    
    class "AuthProperties.Cookies" as CookiesProps {
        -access: AccessCookie
        -refresh: RefreshCookie
    }
    
    class "AuthProperties.Cookies.AccessCookie" as AccessCookieProps {
        -secure: boolean
        -httpOnly: boolean
        -sameSite: SameSitePolicy
        -path: String
    }
    
    class "AuthProperties.Cookies.RefreshCookie" as RefreshCookieProps {
        -secure: boolean
        -httpOnly: boolean
        -sameSite: SameSitePolicy
        -path: String
    }
    
    class "AuthProperties.Repository" as RepositoryProps {
        -type: RepositoryType
        -database: Database
    }
    
    class "AuthProperties.Database" as DatabaseProps {
        -refreshTokensTable: String
        -passwordResetTokensTable: String
        -schema: String
        -url: String
        -driverClassName: String
    }
    
    class "AuthProperties.PasswordReset" as PasswordResetProps {
        -enabled: boolean
        -tokenExpiryHours: int
        -maxAttempts: int
        -timeWindowMs: int
        -enableCleanup: boolean
        -cleanupIntervalHours: int
        -tokenLength: int
        -requireHttps: boolean
    }
    
    class "AuthProperties.Email" as EmailProps {
        -fromAddress: String
        -password: String
        -host: String
        -port: int
        -fromName: String
        -resetSubject: String
        -resetTemplate: String
    }
    
    class "AuthProperties.RoleManagement" as RoleManagementProps {
        -enableRoleEvents: boolean
        -requireAdminForRoleChanges: boolean
        -allowSelfRoleModification: boolean
    }
    
    enum RepositoryType {
        JPA
        POSTGRESQL
    }
    
    enum StorageType {
        MEMORY
        REDIS
    }
    
    enum SameSitePolicy {
        STRICT
        LAX
        NONE
    }
    
    AuthProperties *-- JwtProps
    AuthProperties *-- ControllersProps
    AuthProperties *-- PasswordPolicyProps
    AuthProperties *-- RefreshTokensProps
    AuthProperties *-- RateLimiterProps
    AuthProperties *-- TokenBlocklistProps
    AuthProperties *-- RedisProps
    AuthProperties *-- CookiesProps
    AuthProperties *-- RepositoryProps
    AuthProperties *-- PasswordResetProps
    AuthProperties *-- EmailProps
    AuthProperties *-- RoleManagementProps
    ControllersProps *-- ControllerProps
    CookiesProps *-- AccessCookieProps
    CookiesProps *-- RefreshCookieProps
    RepositoryProps *-- DatabaseProps
    RepositoryProps --> RepositoryType
    RateLimiterProps --> StorageType
    TokenBlocklistProps --> StorageType
    AccessCookieProps --> SameSitePolicy
    RefreshCookieProps --> SameSitePolicy

}

package "Exception Handling" <<Rectangle>> {
    
    class GlobalExceptionHandler {
        +handleDuplicateResourceException(ex: DuplicateResourceException): ResponseEntity<ErrorResponse>
        +handleResourceNotFoundException(ex: ResourceNotFoundException): ResponseEntity<ErrorResponse>
        +handleTokenExpiredException(ex: TokenExpiredException): ResponseEntity<ErrorResponse>
        +handleValidationException(ex: MethodArgumentNotValidException): ResponseEntity<ErrorResponse>
        +handleGenericException(ex: Exception): ResponseEntity<ErrorResponse>
    }
    
    class DuplicateResourceException {
        +DuplicateResourceException(message: String)
    }
    
    class ResourceNotFoundException {
        +ResourceNotFoundException(message: String)
    }
    
    ' NEW: Token Exception
    class TokenExpiredException {
        +TokenExpiredException(message: String)
    }
    
    class ErrorResponse {
        -message: String
        -timestamp: LocalDateTime
    }
}

package "Service Layer" <<Rectangle>> {

    class UserServiceImpl {
        -userRepository: UserRepository
        +createUser(user: User): User
        +getUserByEmail(email: String): User
        +emailExists(email: String): boolean
        +usernameExists(username: String): boolean
        +updateUser(id: Long, user: User): User
        +deleteUser(id: Long): void
        +getAllUsers(): List<User>
    }

    class JwtServiceImpl {
        -secret: String
        -accessTokenExpiration: long
        -key: Key
        +generateAccessToken(subject: String, authorities: Collection<GrantedAuthority>): String
        +isTokenValid(token: String, email: String): boolean
        -createToken(claims: Map<String, Object>, subject: String): String
        -getKey(): Key
    }

    class PasswordPolicy {
        -authProperties: AuthProperties
        -minLength: int
        -maxLength: int
        -requireUpperCase: boolean
        -requireLowerCase: boolean
        -requireDigit: boolean
        -requireSpecialChar: boolean
        -specialCharacters: String
        -preventCommonPasswords: boolean
        -commonPasswords: Set<String>
        +PasswordPolicy(authProperties: AuthProperties)
        +validatePassword(password: String): boolean
        +generateSecurePassword(): String
        -loadCommonPasswords(): Set<String>
        -validateLength(password: String): void
        -validateCharacterRequirements(password: String): void
        -validateCommonPassword(password: String): void
    }

    class UserDetailsServiceImpl {
        -userService: UserService<User, Long>
        +loadUserByUsername(email: String): UserDetails
    }

    ' NEW: Refresh Token Service Implementation (v1.2.0)
    class RefreshTokenServiceImpl {
        -refreshTokenRepository: RefreshTokenRepository
        -userService: UserService
        -authProperties: AuthProperties
        +createRefreshToken(user: AuthUser): RefreshToken
        +findByToken(token: String): Optional<RefreshToken>
        +verifyExpiration(token: RefreshToken): RefreshToken
        +deleteByToken(token: String): void
        +deleteAllByUserEmail(userEmail: String): void
    }

    ' NEW: Refresh Token Cleanup Service (v1.2.0)
    class RefreshTokenCleanupService {
        -refreshTokenRepository: RefreshTokenRepository
        -authProperties: AuthProperties
        +cleanupExpiredTokens(): void
        +cleanupExpiredTokensForUser(userEmail: String): void
    }
    
    ' NEW in v4.0.0: Password Reset Service Implementation
    class PasswordResetServiceImpl {
        -passwordResetRepository: PasswordResetTokenRepository
        -userService: UserService
        -emailService: EmailService
        -authProperties: AuthProperties
        +requestReset(email: String): void
        +validateToken(token: String): boolean
        +completeReset(token: String, newPassword: String): void
        +cleanupExpiredTokens(): void
    }
    
    ' NEW in v4.0.0: Role Service Implementation
    class RoleServiceImpl {
        -userService: UserService
        -roleMapper: RoleMapper
        -eventPublisher: ApplicationEventPublisher
        +getUserRoles(username: String): List<R>
        +addRoleToUser(username: String, role: R): void
        +removeRoleFromUser(username: String, role: R): void
        +bulkUpdateUserRoles(username: String, roles: Set<R>): void
    }

    UserServiceImpl .up.|> UserService
    JwtServiceImpl .up.|> JwtService
    PasswordPolicy .up.|> PasswordPolicyService
    UserDetailsServiceImpl .up.|> UserDetailsService
    RefreshTokenServiceImpl .up.|> RefreshTokenService
    PasswordResetServiceImpl .up.|> PasswordResetService
    RoleServiceImpl .up.|> RoleService
    UserServiceImpl --> PasswordPolicyService : validates passwords
    RefreshTokenServiceImpl --> UserService : uses
    RefreshTokenCleanupService --> RefreshTokenRepository : cleans up
}


' Relationships
UserServiceImpl --> UserRepository : uses
UserDetailsServiceImpl --> UserService : uses
AuthController --> JwtService : uses
AuthController --> RefreshTokenService : uses
UserController --> UserService : uses
UserController --> PasswordPolicyService : uses
RoleManagementController --> RoleService: uses
RoleManagementController --> UserService : uses
PasswordResetController --> PasswordResetService : uses
PasswordResetController --> UserService : uses
JwtAuthFilter --> JwtService : uses
SecurityConfig --> JwtAuthFilter : configures
UserDTOMapper --> User : maps
RefreshTokenCleanupService --> RefreshTokenRepository : uses
RefreshTokenServiceImpl --> RefreshTokenRepository : uses

' Notes with better styling
note right of AuthUser #E8F4FD
  **Enhanced Generic Interface (v1.0.0)**
  Type-safe role generics (v3.0.0) with
  improved polymorphic behavior
  and better decoupling
end note

note right of User #E8F4FD
  **UserDetails Implementation (v1.0.0)**
  UUID primary keys (v3.0.0) with enhanced
  Spring Security integration
end note

note bottom of Username #E8F4FD
  **Value Objects**
  Built-in validation and
  immutability guarantees
end note

note bottom of RefreshToken #E8F4FD
  **🆕 Refresh Token (v1.2.0)**
  Secure token rotation with
  configurable expiration
end note

note bottom of PasswordResetToken #E8F4FD
  **🆕 Password Reset (v4.0.0)**
  OWASP-compliant password reset
  with email integration
end note

note bottom of RefreshTokenRepository #E8F4FD
  **🆕 Multi-Repository Support (v1.2.0)**
  JPA and PostgreSQL implementations
  with resolved interface conflicts
end note

note bottom of UserServiceImpl #E8F4FD
  **Enhanced Generic Service (v3.0.0)**
  Three-type generics <U,R,ID>
  with UUID support and improved
  type safety
end note

note top of AuthAutoConfiguration #E8F4FD
  **Auto-Configuration**
  Automatically configures beans
  when starter is included
end note



note right of RefreshTokenServiceImpl #E8F4FD
  **🆕 Refresh Token Service (v1.2.0)**
  Manages token lifecycle with
  automatic cleanup and rotation
end note

note right of UserPostgreSQLRepository #E8F4FD
  **🆕 PostgreSQL Native Repository (v3.0.0)**
  Direct JDBC implementation
  with enhanced performance and
  custom SQL queries
end note

note right of UserFactory #E8F4FD
  **🆕 Factory Pattern (v3.0.0)**
  Decoupled user creation with
  type-safe generics for enhanced
  architecture flexibility
end note

note right of UUIDConverter #E8F4FD
  **🆕 Helper Classes (v3.0.0)**
  Type converters and mappers
  for PostgreSQL integration
  and better type safety
end note

note right of OpenApiConfig #E8F4FD
  **🆕 OpenAPI Documentation (v4.0.0)**
  Complete Swagger/OpenAPI integration
  with interactive documentation
  available at /swagger-ui.html
end note

note right of PostgreSQLRefreshTokenRepository #E8F4FD
  **🆕 PostgreSQL Repository (v1.2.0)**
  Native queries with proper
  timestamp handling
end note

' Blocklist and Rate Limiter interfaces and implementations
package "Blocklist & Rate Limiter" <<Rectangle>> {
    interface TokenBlocklist {
        +revoke(token: String): void
        +isRevoked(token: String): boolean
    }
    class InMemoryTokenBlocklist {
        +revoke(token: String): void
        +isRevoked(token: String): boolean
    }
    class RedisTokenBlockList {
        +revoke(token: String): void
        +isRevoked(token: String): boolean
    }
    interface RateLimiter {
        +isEnabled(): boolean
        +allowRequest(key: String): boolean
    }
    class InMemoryRateLimiter {
        +isEnabled(): boolean
        +allowRequest(key: String): boolean
    }
    class RedisRateLimiter {
        +isEnabled(): boolean
        +allowRequest(key: String): boolean
    }
    TokenBlocklist <|.. InMemoryTokenBlocklist
    TokenBlocklist <|.. RedisTokenBlockList
    RateLimiter <|.. InMemoryRateLimiter
    RateLimiter <|.. RedisRateLimiter
}





' Add notes for cookie-based token handling and security
note right of AuthController #E8F4FD
  **Cookie-based Auth (v2.0.0)**
  All tokens are set and read via
  secure, HttpOnly cookies only.
  Includes /api/auth/revoke endpoint
  for admin token revocation.
end note

note right of PasswordResetController #E8F4FD
  **🆕 Password Reset API (v4.0.0)**
  OWASP-compliant password reset
  with email integration and
  secure token validation.
end note

note right of RoleManagementController #E8F4FD
  **🆕 Role Management API (v4.0.0)**
  Full CRUD operations for user
  roles with proper authorization
  and audit event publishing.
end note

note right of TokenBlocklist #E8F4FD
  **Blocklist (v2.0.0)**
  Supports in-memory and Redis
  for token revocation.
end note

note right of RateLimiter #E8F4FD
  **Rate Limiting (v2.0.0)**
  In-memory and Redis implementations
  for per-user/IP request limiting.
end note

note right of JwtAuthFilter #E8F4FD
  **JWT via Cookie**
  Extracts JWT from access_token cookie
  for all protected endpoints.
end note

@enduml